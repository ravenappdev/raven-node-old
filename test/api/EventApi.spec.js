/*
 * Raven API
 * This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@ravenapp.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  var testDataFile = process.env.TEST_DATA_FILE
    ? process.env.TEST_DATA_FILE
    : '/tmp/codegen-6367828982500657206/test/test-data.json';
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'json-pointer', '../assert-equals', '../../src/index', testDataFile], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('json-pointer'), require('../assert-equals'), require('../../src/index'), require(testDataFile));
  } else {
    // Browser globals (root is window)
    // TODO: load browser test data from file. Maybe via FileSystem (Mozilla, chrome.fileSystem)?
    var testData = null;
    factory(root.expect, root.JsonPointer, root.assertEquals, root.RavenApi, testData);
  }
}(this, function(expect, pointer, assertEquals, RavenApi, testData) {
  'use strict';

  var instance;
  var testDataCache;

  function getTestData(pointer) {
    return testDataCache.get('/EventApi' + pointer);
  }

  before(function() {
    testDataCache = pointer(testData);
  });


  beforeEach(function() {
    instance = new RavenApi.EventApi();
  });

  describe('(package)', function() {
    describe('EventApi', function() {
      describe('sendBulkEvent', function() {
        it('should call sendBulkEvent successfully', function(done) {
          var appId = getTestData('/sendBulkEvent/appId');
          var event = getTestData('/sendBulkEvent/event');

          instance.sendBulkEvent(appId, event).then(function(data) {
            let expected = getTestData('/sendBulkEvent/response');
            assertEquals(expected, data);

            done();
          }, function(error) {
            done(error);
          });
        });
      });
      describe('sendEvent', function() {
        it('should call sendEvent successfully', function(done) {
          var appId = getTestData('/sendEvent/appId');
          var event = getTestData('/sendEvent/event');
          var opts = {};
          opts.idempotencyKey = getTestData('/sendEvent/idempotencyKey');

          instance.sendEvent(appId, event, opts).then(function(data) {
            let expected = getTestData('/sendEvent/response');
            assertEquals(expected, data);

            done();
          }, function(error) {
            done(error);
          });
        });
      });
    });
  });

}));
