/*
 * Raven API
 * This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@ravenapp.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RavenApi);
  }
}(this, function(expect, RavenApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EventOverride', function() {
      beforeEach(function() {
        instance = new RavenApi.EventOverride();
      });

      it('should create an instance of EventOverride', function() {
        // TODO: update the code to test EventOverride
        expect(instance).to.be.a(RavenApi.EventOverride);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property sms (base name: "sms")', function() {
        // TODO: update the code to test the property sms
        expect(instance).to.have.property('sms');
        // expect(instance.sms).to.be(expectedValueLiteral);
      });

      it('should have the property whatsapp (base name: "whatsapp")', function() {
        // TODO: update the code to test the property whatsapp
        expect(instance).to.have.property('whatsapp');
        // expect(instance.whatsapp).to.be(expectedValueLiteral);
      });

      it('should have the property push (base name: "push")', function() {
        // TODO: update the code to test the property push
        expect(instance).to.have.property('push');
        // expect(instance.push).to.be(expectedValueLiteral);
      });

      it('should have the property webhook (base name: "webhook")', function() {
        // TODO: update the code to test the property webhook
        expect(instance).to.have.property('webhook');
        // expect(instance.webhook).to.be(expectedValueLiteral);
      });

      it('should have the property voice (base name: "voice")', function() {
        // TODO: update the code to test the property voice
        expect(instance).to.have.property('voice');
        // expect(instance.voice).to.be(expectedValueLiteral);
      });

      it('should have the property slack (base name: "slack")', function() {
        // TODO: update the code to test the property slack
        expect(instance).to.have.property('slack');
        // expect(instance.slack).to.be(expectedValueLiteral);
      });

      it('should have the property providers (base name: "providers")', function() {
        // TODO: update the code to test the property providers
        expect(instance).to.have.property('providers');
        // expect(instance.providers).to.be(expectedValueLiteral);
      });

    });
  });

}));
