/*
 * Raven API
 * This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@ravenapp.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Response', 'model/SendEvent', 'model/SendEventBulk', 'model/SuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Response'), require('../model/SendEvent'), require('../model/SendEventBulk'), require('../model/SuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.RavenApi) {
      root.RavenApi = {};
    }
    root.RavenApi.EventApi = factory(root.RavenApi.ApiClient, root.RavenApi.ErrorResponse, root.RavenApi.Response, root.RavenApi.SendEvent, root.RavenApi.SendEventBulk, root.RavenApi.SuccessResponse);
  }
}(this, function(ApiClient, ErrorResponse, Response, SendEvent, SendEventBulk, SuccessResponse) {
  'use strict';

  /**
   * Event service.
   * @module api/EventApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EventApi. 
   * @alias module:api/EventApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the sendBulkEvent operation.
     * @callback module:api/EventApi~sendBulkEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends the event in bulk to all the clients specified
     * This API will send the event in bulk to the clients specified
     * @param {String} appId app id of raven app
     * @param {module:model/SendEventBulk} event the body for the event that has to be triggered
     * @param {module:api/EventApi~sendBulkEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.sendBulkEvent = function(appId, event, callback) {
      var postBody = event;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling sendBulkEvent");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sendBulkEvent");
      }


      var pathParams = {
        'app_id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events/bulk_send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEvent operation.
     * @callback module:api/EventApi~sendEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sends the event to the client specified
     * This API will send the event to the client specified
     * @param {String} appId app id of raven app
     * @param {module:model/SendEvent} event the body for the event that has to be triggered
     * @param {Object} opts Optional parameters
     * @param {String} opts.idempotencyKey idempotency key of api
     * @param {module:api/EventApi~sendEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.sendEvent = function(appId, event, opts, callback) {
      opts = opts || {};
      var postBody = event;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling sendEvent");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sendEvent");
      }


      var pathParams = {
        'app_id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events/send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
