/*
 * Raven API
 * This is OpenAPI defintion for the APIs of Raven.  You can find out more about Raven at [https://ravenapp.dev/](https://ravenapp.dev/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@ravenapp.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {Response} from '../model/Response';
import {SendEvent} from '../model/SendEvent';
import {SendEventBulk} from '../model/SendEventBulk';


export class EventApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    sendBulkEventWithHttpInfo(appId, event, opts) {
      opts = opts || {};
      let postBody = event;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling sendBulkEvent");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sendBulkEvent");
      }


      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events/bulk_send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    sendBulkEvent(appId, event, opts) {
      return this.sendBulkEventWithHttpInfo(appId, event, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    sendEventWithHttpInfo(appId, event, opts) {
      opts = opts || {};
      let postBody = event;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling sendEvent");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling sendEvent");
      }


      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    sendEvent(appId, event, opts) {
      return this.sendEventWithHttpInfo(appId, event, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
